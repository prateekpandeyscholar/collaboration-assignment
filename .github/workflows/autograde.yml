name: Autograding

on:
  push:
  workflow_dispatch:

jobs:
  autograde:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Ensure jq is available
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y && sudo apt-get install -y jq
          fi

      - name: Initialize score + per-test flags
        run: |
          {
            echo "SCORE=0"
            echo "T1=0"; echo "T2=0"; echo "T3=0"; echo "T4=0"; echo "T5=0"; echo "T6=0"
          } >> "$GITHUB_ENV"

      # 1) File exists: team_greetings.md (+1)
      - name: Check if team_greetings.md exists
        shell: bash
        run: |
          if [ -f team_greetings.md ]; then
            echo "File exists ✅ (+1)"
            CUR=$(grep -Eo '^SCORE=[0-9]+' "$GITHUB_ENV" | cut -d= -f2 || echo 0)
            CUR=$((CUR+1))
            sed -i "/^SCORE=/d" "$GITHUB_ENV"
            { echo "SCORE=$CUR"; echo "T1=1"; } >> "$GITHUB_ENV"
          else
            echo "Missing team_greetings.md ❌"
          fi

      # 2) Roll number format present (+1) e.g. 123A456
      - name: Check roll number format
        shell: bash
        run: |
          if grep -Eq "[0-9]{3}[A-Z][0-9]{3}" team_greetings.md 2>/dev/null; then
            echo "Roll number format correct ✅ (+1)"
            CUR=$(grep -Eo '^SCORE=[0-9]+' "$GITHUB_ENV" | cut -d= -f2 || echo 0)
            CUR=$((CUR+1))
            sed -i "/^SCORE=/d" "$GITHUB_ENV"
            { echo "SCORE=$CUR"; echo "T2=1"; } >> "$GITHUB_ENV"
          else
            echo "Roll number format incorrect ❌"
          fi

      # 3) At least 3 unique roll numbers (+1)
      - name: Check roll number count
        shell: bash
        run: |
          COUNT=$(grep -Eo "[0-9]{3}[A-Z][0-9]{3}" team_greetings.md 2>/dev/null | sort -u | wc -l)
          if [ "${COUNT:-0}" -gt 2 ]; then
            echo "More than 2 roll numbers ✅ (+1)"
            CUR=$(grep -Eo '^SCORE=[0-9]+' "$GITHUB_ENV" | cut -d= -f2 || echo 0)
            CUR=$((CUR+1))
            sed -i "/^SCORE=/d" "$GITHUB_ENV"
            { echo "SCORE=$CUR"; echo "T3=1"; } >> "$GITHUB_ENV"
          else
            echo "Not enough roll numbers ❌ (found ${COUNT:-0})"
          fi

      # 4) Branch name format (+2): feature/123A456
      - name: Check branch name format
        shell: bash
        run: |
          BRANCH="${GITHUB_REF#refs/heads/}"
          if [[ "$BRANCH" =~ ^feature/[0-9]{3}[A-Z][0-9]{3}$ ]]; then
            echo "Branch name format correct ✅ (+2)"
            CUR=$(grep -Eo '^SCORE=[0-9]+' "$GITHUB_ENV" | cut -d= -f2 || echo 0)
            CUR=$((CUR+2))
            sed -i "/^SCORE=/d" "$GITHUB_ENV"
            { echo "SCORE=$CUR"; echo "T4=2"; } >> "$GITHUB_ENV"
          else
            echo "Branch name format incorrect ❌ (got: $BRANCH)"
          fi

      # 5) Collaborators added via GitHub API (+2)
      - name: Check collaborators via GitHub API
        shell: bash
        env:
          GH_REPO: ${{ github.repository }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          OWNER="${GH_REPO%/*}"
          REPO="${GH_REPO#*/}"
          RESP=$(curl -sf -H "Authorization: token ${GH_TOKEN}" \
            "https://api.github.com/repos/${OWNER}/${REPO}/collaborators" || echo "")

          if [ -z "$RESP" ] || echo "$RESP" | jq -e '.message?' >/dev/null; then
            echo "⚠️ Cannot fetch collaborators — skipping points."
            exit 0
          fi

          COLLAB_COUNT=$(echo "$RESP" | jq 'length')
          echo "Found $COLLAB_COUNT collaborators."

          if [ "$COLLAB_COUNT" -ge 2 ]; then
            echo "Has 2+ collaborators ✅ (+2)"
            CUR=$(grep -Eo '^SCORE=[0-9]+' "$GITHUB_ENV" | cut -d= -f2 || echo 0)
            CUR=$((CUR+2))
            sed -i "/^SCORE=/d" "$GITHUB_ENV"
            { echo "SCORE=$CUR"; echo "T5=2"; } >> "$GITHUB_ENV"
          else
            echo "Not enough collaborators ❌"
          fi

      # 6) Unique commit authors by GitHub username via API (+2)
      - name: Check unique commit authors
        shell: bash
        env:
          GH_REPO: ${{ github.repository }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          OWNER="${GH_REPO%/*}"
          REPO="${GH_REPO#*/}"
          RESP=$(curl -sf -H "Authorization: token ${GH_TOKEN}" \
            "https://api.github.com/repos/${OWNER}/${REPO}/commits?per_page=100" || echo "")

          if [ -z "$RESP" ] || echo "$RESP" | jq -e '.message?' >/dev/null; then
            echo "⚠️ Cannot fetch commits — skipping points."
            exit 0
          fi

          AUTHORS=$(echo "$RESP" | jq -r '[ .[].author.login, .[].committer.login ] | map(select(. != null)) | unique | .[]?')
          COUNT=$(echo "$AUTHORS" | grep -c . || true)

          echo "Unique commit authors: $COUNT"
          echo "$AUTHORS" | sed 's/^/  - /'

          if [ "${COUNT:-0}" -ge 2 ]; then
            echo "Has 2+ unique commit authors ✅ (+2)"
            CUR=$(grep -Eo '^SCORE=[0-9]+' "$GITHUB_ENV" | cut -d= -f2 || echo 0)
            CUR=$((CUR+2))
            sed -i "/^SCORE=/d" "$GITHUB_ENV"
            { echo "SCORE=$CUR"; echo "T6=2"; } >> "$GITHUB_ENV"
          else
            echo "Not enough unique commit authors ❌"
          fi

      - name: Save score for GitHub Classroom
  shell: bash
  run: |
    SCORE_VAL=${SCORE:-0}
    T1=${T1:-0}
    T2=${T2:-0}
    T3=${T3:-0}
    T4=${T4:-0}
    T5=${T5:-0}
    T6=${T6:-0}

    echo "Final SCORE=$SCORE_VAL"
    mkdir -p .github/classroom

    cat > .github/classroom/results.json <<EOF
{
  "version": 1,
  "tests": [
    { "name": "team_greetings.md exists", "score": $T1, "max_score": 1 },
    { "name": "Roll number format",       "score": $T2, "max_score": 1 },
    { "name": "3+ unique roll numbers",   "score": $T3, "max_score": 1 },
    { "name": "Branch name feature/ID",   "score": $T4, "max_score": 2 },
    { "name": "2+ collaborators (API)",   "score": $T5, "max_score": 2 },
    { "name": "2+ commit authors (API)",  "score": $T6, "max_score": 3 }
  ],
  "summary": "Total score $SCORE_VAL out of 10"
}
EOF
